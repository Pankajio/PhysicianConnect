package physicianconnect.presentation;

import org.junit.jupiter.api.*;
import org.mockito.*;
import physicianconnect.logic.AvailabilityService;
import physicianconnect.logic.controller.AppointmentController;
import physicianconnect.objects.Appointment;
import physicianconnect.objects.TimeSlot;
import physicianconnect.presentation.config.UIConfig;
import physicianconnect.presentation.util.TestUtils;

import javax.swing.*;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;


class WeeklyAvailabilityPanelTest {

    @Mock
    AvailabilityService availabilityService;
    @Mock
    AppointmentController appointmentController;
    Runnable onWeekChanged;

    LocalDate monday;
    Map<LocalDate, List<TimeSlot>> weekData;

    @BeforeEach
    void setup() throws SQLException {
        MockitoAnnotations.openMocks(this);
        onWeekChanged = mock(Runnable.class);
        monday = LocalDate.of(2025, 6, 9); // Assume this is a Monday

        // Prepare weekData: all slots free except one booked on Wednesday at 10:00
        weekData = new LinkedHashMap<>();
        for (int i = 0; i < 7; i++) {
            LocalDate day = monday.plusDays(i);
            List<TimeSlot> slots = TimeSlot.generateDailySlots(day);
            weekData.put(day, slots);
        }
        // Book Wednesday 10:00 slot
        LocalDate wed = monday.plusDays(2);
        List<TimeSlot> wedSlots = weekData.get(wed);
        TimeSlot bookedSlot = wedSlots.get(4); // 10:00
        bookedSlot.setBooked(true);
        bookedSlot.setPatientName("John Doe");
    }

    @Test
    void testPanelLoadsWeekDataFromService() throws SQLException {
        when(availabilityService.getWeeklyAvailability(anyString(), any())).thenReturn(weekData);

        WeeklyAvailabilityPanel panel = new WeeklyAvailabilityPanel(
                "doc1", availabilityService, appointmentController, monday, onWeekChanged);

        // Check that weekData is set and contains correct days
        Map<?, ?> loaded = (Map<?, ?>) TestUtils.getField(panel, "weekData");
        assertEquals(7, loaded.size());
        assertTrue(loaded.containsKey(monday.plusDays(2))); // Wednesday
    }

    @Test
    void testPanelFallsBackToAllFreeOnServiceException() throws SQLException {
        when(availabilityService.getWeeklyAvailability(anyString(), any())).thenThrow(new RuntimeException("fail"));

        WeeklyAvailabilityPanel panel = new WeeklyAvailabilityPanel(
                "doc1", availabilityService, appointmentController, monday, onWeekChanged);

        Map<?, ?> loaded = (Map<?, ?>) TestUtils.getField(panel, "weekData");
        assertEquals(7, loaded.size());
        for (Object slots : loaded.values()) {
            // Updated: match the actual slot count generated by TimeSlot.generateDailySlots
            assertEquals(18, ((List<?>) slots).size());
            for (Object ts : (List<?>) slots) {
                assertFalse(((TimeSlot) ts).isBooked());
            }
        }
    }

//    @Test
//    void testClickOnFreeSlotShowsAddDialogAndPrefills() throws SQLException {
//        when(availabilityService.getWeeklyAvailability(anyString(), any())).thenReturn(weekData);
//
//        WeeklyAvailabilityPanel panel = new WeeklyAvailabilityPanel(
//                "doc1", availabilityService, appointmentController, monday, onWeekChanged);
//
//        // Simulate click on Monday, slot 0 (08:00)
//        int x = 80 + 0 * 100 + 10; // TIME_LABEL_WIDTH + day*DAY_COLUMN_WIDTH + offset
//        int y = 30 + 0 * 30 + 10; // HEADER_HEIGHT + slot*PIXEL_PER_SLOT + offset
//
//        try (MockedStatic<JOptionPane> mockedPane = mockStatic(JOptionPane.class);
//                MockedConstruction<AddAppointmentPanel> addDlgMock = mockConstruction(AddAppointmentPanel.class,
//                        (mock, context) -> {
//                            // Provide real JSpinners so setValue won't NPE
//                            mock.dateSpinner = new JSpinner(new SpinnerDateModel());
////                            mock.timeSpinner = new JSpinner(new SpinnerDateModel());
//                            doNothing().when(mock).setVisible(true);
//                        })) {
//
//            mockedPane.when(() -> JOptionPane.showConfirmDialog(
//                    any(), anyString(), eq(UIConfig.ADD_APPOINTMENT_CONFIRM_TITLE), eq(JOptionPane.YES_NO_OPTION)))
//                    .thenReturn(JOptionPane.YES_OPTION);
//
//            MouseEvent click = new MouseEvent(panel, MouseEvent.MOUSE_CLICKED, System.currentTimeMillis(), 0, x, y, 1,
//                    false);
//            for (var l : panel.getMouseListeners())
//                l.mouseClicked(click);
//
//            // Should have constructed AddAppointmentPanel
//            assertEquals(1, addDlgMock.constructed().size());
//            AddAppointmentPanel dlg = addDlgMock.constructed().get(0);
//            verify(dlg).setVisible(true);
//        }
//    }

    @Test
    void testClickOnBookedSlotShowsViewDialog() throws SQLException {
        when(availabilityService.getWeeklyAvailability(anyString(), any())).thenReturn(weekData);

        // Prepare appointmentController to return an appointment for the booked slot
        LocalDate wed = monday.plusDays(2);
        LocalDateTime slotTime = wed.atTime(10, 0);
        Appointment appt = mock(Appointment.class);
        when(appt.getDateTime()).thenReturn(slotTime);
        when(appointmentController.getAppointmentsForPhysician(anyString()))
                .thenReturn(List.of(appt));

        WeeklyAvailabilityPanel panel = new WeeklyAvailabilityPanel(
                "doc1", availabilityService, appointmentController, monday, onWeekChanged);

        // Simulate click on Wednesday, slot 4 (10:00, which is booked)
        int x = 80 + 2 * 100 + 10;
        int y = 30 + 4 * 30 + 10;

        try (MockedConstruction<ViewAppointmentPanel> viewDlgMock = mockConstruction(ViewAppointmentPanel.class,
                (mock, context) -> doNothing().when(mock).setVisible(true))) {

            MouseEvent click = new MouseEvent(panel, MouseEvent.MOUSE_CLICKED, System.currentTimeMillis(), 0, x, y, 1,
                    false);
            for (var l : panel.getMouseListeners())
                l.mouseClicked(click);

            // Should have constructed ViewAppointmentPanel
            assertEquals(1, viewDlgMock.constructed().size());
            ViewAppointmentPanel dlg = viewDlgMock.constructed().get(0);
            verify(dlg).setVisible(true);
        }
    }

    @Test
    void testClickOnBookedSlotWithNoAppointmentShowsErrorDialog() throws SQLException {
        when(availabilityService.getWeeklyAvailability(anyString(), any())).thenReturn(weekData);
        when(appointmentController.getAppointmentsForPhysician(anyString()))
                .thenReturn(Collections.emptyList());

        WeeklyAvailabilityPanel panel = new WeeklyAvailabilityPanel(
                "doc1", availabilityService, appointmentController, monday, onWeekChanged);

        // Simulate click on Wednesday, slot 4 (10:00, which is booked)
        int x = 80 + 2 * 100 + 10;
        int y = 30 + 4 * 30 + 10;

        try (MockedStatic<JOptionPane> mockedPane = mockStatic(JOptionPane.class)) {
            MouseEvent click = new MouseEvent(panel, MouseEvent.MOUSE_CLICKED, System.currentTimeMillis(), 0, x, y, 1,
                    false);
            for (var l : panel.getMouseListeners())
                l.mouseClicked(click);

            mockedPane.verify(() -> JOptionPane.showMessageDialog(
                    any(), eq(UIConfig.ERROR_APPOINTMENT_NOT_FOUND), eq(UIConfig.ERROR_DIALOG_TITLE),
                    eq(JOptionPane.ERROR_MESSAGE)));
        }
    }

    @Test
    void testClickOnTimeLabelOrHeaderDoesNothing() throws SQLException {
        when(availabilityService.getWeeklyAvailability(anyString(), any())).thenReturn(weekData);

        WeeklyAvailabilityPanel panel = new WeeklyAvailabilityPanel(
                "doc1", availabilityService, appointmentController, monday, onWeekChanged);

        // Click in time label column
        int x = 10; // < TIME_LABEL_WIDTH
        int y = 50;
        MouseEvent click1 = new MouseEvent(panel, MouseEvent.MOUSE_CLICKED, System.currentTimeMillis(), 0, x, y, 1,
                false);

        // Click in header row
        int x2 = 100;
        int y2 = 10; // < HEADER_HEIGHT
        MouseEvent click2 = new MouseEvent(panel, MouseEvent.MOUSE_CLICKED, System.currentTimeMillis(), 0, x2, y2, 1,
                false);

        for (var l : panel.getMouseListeners()) {
            l.mouseClicked(click1);
            l.mouseClicked(click2);
        }
        // No dialogs or panels should be shown, so nothing to assert, but no exceptions
        // should occur
    }

    @Test
    void testLoadWeekUpdatesWeekDataAndRepaints() throws SQLException {
        when(availabilityService.getWeeklyAvailability(anyString(), any())).thenAnswer(invocation -> {
            LocalDate weekStart = invocation.getArgument(1);
            Map<LocalDate, List<TimeSlot>> newWeek = new LinkedHashMap<>();
            for (int i = 0; i < 7; i++) {
                LocalDate day = weekStart.plusDays(i);
                List<TimeSlot> slots = TimeSlot.generateDailySlots(day);
                newWeek.put(day, slots);
            }
            return newWeek;
        });

        WeeklyAvailabilityPanel panel = new WeeklyAvailabilityPanel(
                "doc1", availabilityService, appointmentController, monday, onWeekChanged);

        LocalDate nextMonday = monday.plusWeeks(1);
        panel.loadWeek(nextMonday);

        Map<?, ?> loaded = (Map<?, ?>) TestUtils.getField(panel, "weekData");
        assertEquals(7, loaded.size());
        assertTrue(loaded.containsKey(nextMonday.plusDays(6)));
    }

    @Test
    void testPaintComponentDrawsWithoutError() throws SQLException {
        when(availabilityService.getWeeklyAvailability(anyString(), any())).thenReturn(weekData);

        WeeklyAvailabilityPanel panel = new WeeklyAvailabilityPanel(
                "doc1", availabilityService, appointmentController, monday, onWeekChanged);

        // Use a BufferedImage as Graphics context for headless test
        BufferedImage img = new BufferedImage(900, 600, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = img.createGraphics();
        assertDoesNotThrow(() -> panel.paintComponent(g2));
        g2.dispose();
    }


}